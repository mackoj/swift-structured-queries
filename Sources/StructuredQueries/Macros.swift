/// Defines and implements a conformance to the ``Table`` protocol.
@attached(
  extension,
  conformances: Table,
  PrimaryKeyedTable,
  names: named(Columns),
  named(Draft),
  named(columns),
  named(init(_:)),
  named(init(decoder:)),
  named(tableName)
)
@attached(
  memberAttribute
)
public macro Table(_ name: String? = nil) =
  #externalMacro(
    module: "StructuredQueriesMacros",
    type: "TableMacro"
  )

/// Customizes a column generated by the ``Table`` protocol.
///
/// - Parameters:
///   - name: The column's name.
///   - representableType: A type that represents the property type in a query expression. For types
///     that don't have a single representation in SQL, like `Date` and `UUID`.
///   - primaryKey: The column is its table's auto-incrementing primary key.
@attached(accessor, names: named(willSet))
public macro Column(
  _ name: String? = nil,
  as representableType: (any QueryRepresentable.Type)? = nil,
  primaryKey: Bool = false
) =
  #externalMacro(
    module: "StructuredQueriesMacros",
    type: "ColumnMacro"
  )

@attached(
  memberAttribute
)
@attached(
  extension,
  conformances: Table,
  names: named(Columns),
  named(columns),
  named(init(_:)),
  named(init(decoder:)),
  named(tableName)
)
public macro _Draft<T: Table>(_: T.Type) =
  #externalMacro(
    module: "StructuredQueriesMacros",
    type: "TableMacro"
  )

@attached(
  extension,
  conformances: QueryRepresentable,
  names: named(Columns),
  named(init(decoder:))
)
public macro Selection() =
  #externalMacro(
    module: "StructuredQueriesMacros",
    type: "SelectionMacro"
  )

/// Explicitly bind a value to a query.
///
/// This macro explicitly binds a Swift value to a query. This is required when binding a value with
/// multiple query representations, like `Date` and `UUID`:
///
/// ```swift
/// Reminder.where { $0.date >= #bind(Date()) }
/// ```
///
/// > Tip: Explicit binding can also improve the performance of the Swift compiler when
/// > type-checking complex query expressions involving heavily overloaded operators and literals.
/// > See <doc:CompilerPerformance> for more information.
@freestanding(expression)
public macro bind<QueryValue: QueryBindable>(
  _ queryValue: QueryValue.QueryOutput,
  as queryValueType: QueryValue.Type = QueryValue.self
) -> BindQueryExpression<QueryValue> =
  #externalMacro(module: "StructuredQueriesMacros", type: "BindMacro")

/// Introduces raw SQL to a query.
///
/// > Tip: Selectively introducing raw SQL can also improve the performance of the Swift compiler
/// > when type-checking complex query expressions involving heavily overloaded operators and
/// > literals. See <doc:CompilerPerformance> for more information.
@freestanding(expression)
public macro raw<QueryValue>(
  _ queryFragment: QueryFragment,
  as queryValueType: QueryValue.Type = QueryValue.self
) -> RawQueryExpression<QueryValue> =
  #externalMacro(module: "StructuredQueriesMacros", type: "RawMacro")
